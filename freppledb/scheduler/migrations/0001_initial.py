# Generated by Django 4.2.14 on 2024-11-16 06:28

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('input', '0075_alter_operationplan_options_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='SchedulerConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300, unique=True, verbose_name='name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('scheduling_method', models.CharField(choices=[('forward', 'Forward'), ('backward', 'Backward')], default='backward', help_text='Forward: ASAP scheduling, Backward: JIT scheduling', max_length=50, verbose_name='scheduling method')),
                ('objective', models.CharField(choices=[('makespan', 'Minimize makespan'), ('tardiness', 'Minimize tardiness'), ('priority', 'Priority based')], default='makespan', max_length=50, verbose_name='objective')),
                ('horizon_start', models.DateTimeField(blank=True, help_text='Start date and time of scheduling horizon (YYYY-MM-DD HH:mm:ss)', null=True, verbose_name='horizon start')),
                ('horizon_end', models.DateTimeField(blank=True, help_text='End date and time of scheduling horizon (YYYY-MM-DD HH:mm:ss)', null=True, verbose_name='horizon end')),
                ('time_limit', models.IntegerField(default=60, help_text='Time limit for the scheduler in seconds', verbose_name='time limit (seconds)')),
                ('wip_consume_material', models.BooleanField(default=True, help_text='Whether confirmed manufacturing orders consume material', verbose_name='WIP consume material')),
                ('wip_consume_capacity', models.BooleanField(default=True, help_text='Whether confirmed manufacturing orders consume capacity', verbose_name='WIP consume capacity')),
                ('wip_produce_full_quantity', models.BooleanField(default=True, help_text='Whether WIP orders must produce their full quantity', verbose_name='WIP produce full quantity')),
                ('size_minimum', models.DecimalField(blank=True, decimal_places=8, help_text='Minimum quantity for manufacturing orders', max_digits=20, null=True, verbose_name='minimum batch size')),
                ('size_multiple', models.DecimalField(blank=True, decimal_places=8, help_text='Manufacturing order quantities must be a multiple of this size', max_digits=20, null=True, verbose_name='multiple batch size')),
                ('fence_duration', models.DurationField(blank=True, help_text='Time window during which manufacturing orders are frozen', null=True, verbose_name='time fence')),
                ('batch_window', models.DurationField(blank=True, help_text='Time window for batching opportunities', null=True, verbose_name='batch window')),
                ('consider_material', models.BooleanField(default=True, help_text='Whether to consider material availability in scheduling', verbose_name='consider material constraints')),
                ('consider_capacity', models.BooleanField(default=True, help_text='Whether to consider resource capacity in scheduling', verbose_name='consider capacity constraints')),
                ('setup_matrix', models.ForeignKey(blank=True, help_text='Matrix defining setup times between operations', null=True, on_delete=django.db.models.deletion.SET_NULL, to='input.setupmatrix', verbose_name='setup matrix')),
            ],
            options={
                'verbose_name': 'scheduler configuration',
                'verbose_name_plural': 'scheduler configurations',
            },
        ),
        migrations.CreateModel(
            name='SchedulingJob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(blank=True, db_index=True, max_length=300, null=True, verbose_name='source')),
                ('lastmodified', models.DateTimeField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='last modified')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='start date')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='end date')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('queued', 'Queued'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='draft', max_length=20, verbose_name='status')),
                ('sequence', models.IntegerField(default=0, verbose_name='sequence')),
                ('priority', models.IntegerField(default=0, verbose_name='priority')),
                ('buffer', models.ForeignKey(blank=True, help_text='Related buffer for material requirements', null=True, on_delete=django.db.models.deletion.SET_NULL, to='input.buffer', verbose_name='buffer')),
                ('configuration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='scheduler.schedulerconfiguration', verbose_name='configuration')),
                ('demand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduling_jobs', to='input.demand', verbose_name='demand')),
                ('item', models.ForeignKey(blank=True, help_text='Item being produced or consumed', null=True, on_delete=django.db.models.deletion.SET_NULL, to='input.item', verbose_name='item')),
                ('location', models.ForeignKey(blank=True, help_text='Location where the operation is performed', null=True, on_delete=django.db.models.deletion.SET_NULL, to='input.location', verbose_name='location')),
                ('operation_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduling_jobs', to='input.operationplan', verbose_name='operation plan')),
                ('resource', models.ForeignKey(blank=True, help_text='Primary resource required', null=True, on_delete=django.db.models.deletion.SET_NULL, to='input.resource', verbose_name='resource')),
            ],
            options={
                'verbose_name': 'scheduling job',
                'verbose_name_plural': 'scheduling jobs',
                'ordering': ('sequence', 'priority', 'name'),
            },
        ),
        migrations.CreateModel(
            name='StatusLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_status', models.CharField(max_length=20, verbose_name='old status')),
                ('new_status', models.CharField(max_length=20, verbose_name='new status')),
                ('message', models.TextField(blank=True, null=True, verbose_name='message')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_logs', to='scheduler.schedulingjob', verbose_name='job')),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='SchedulingResource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(blank=True, db_index=True, max_length=300, null=True, verbose_name='source')),
                ('lastmodified', models.DateTimeField(db_index=True, default=django.utils.timezone.now, editable=False, verbose_name='last modified')),
                ('quantity', models.DecimalField(decimal_places=8, default='1.00', max_digits=20, verbose_name='quantity')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scheduler.schedulingjob', verbose_name='job')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='input.resource', verbose_name='resource')),
            ],
            options={
                'verbose_name': 'scheduling resource',
                'verbose_name_plural': 'scheduling resources',
                'db_table': 'scheduler_resource',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SchedulingJobExecution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(auto_now_add=True, verbose_name='start time')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='end time')),
                ('status', models.CharField(choices=[('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed')], max_length=20, verbose_name='status')),
                ('solution_info', models.JSONField(blank=True, null=True, verbose_name='solution info')),
                ('error_message', models.TextField(blank=True, null=True, verbose_name='error message')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='scheduler.schedulingjob', verbose_name='job')),
            ],
            options={
                'ordering': ['-start_time'],
            },
        ),
    ]
