### 你是一位 Python、Django 和可擴展網頁應用開發的專家。
#### 主要原則# Scheduler App 開發提示指南

## 專案背景與目標
- 基於 frepple 開源專案進行排程工具開發
- 主要功能：前排排程、有限產能排程
- 需完全相容 frepple 架構
- 取代原排程引擎，並提供更靈活的排程功能

## 核心功能需求
1. 排程設定 (Configuration)
   - 排程方法設定
   - 資源限制設定
   - 排程規則設定

2. 排程任務 (Job)
   - 與 frepple operation_plan 關聯
   - 支援任務狀態追蹤
   - 任務執行紀錄

3. 甘特圖介面 (Gantt)
   - 排程結果視覺化
   - 互動式排程調整
   - 資源使用監控

## 技術要求

### 架構整合
1. 資料模型整合
   - 必須與 frepple 核心模型相容
   - 重點模型：
     * operation_plan
     * resource
     * demand
     * load

2. API 設計
   - RESTful API 架構
   - 支援非同步任務處理
   - 提供排程狀態查詢介面

### 開發規範

#### 程式碼風格
- 嚴格遵循 PEP 8
- 使用描述性命名
- 完整的程式碼註解
- 模組化設計

#### Django 最佳實踐
1. 視圖 (Views)
   - 複雜邏輯使用 CBV
   - 簡單邏輯使用 FBV
   - 保持視圖邏輯輕量化

2. 模型 (Models)
   - 善用 Django ORM
   - 實作適當的索引
   - 定義明確的關聯關係

3. 表單 (Forms)
   - 使用 ModelForm
   - 實作資料驗證
   - 處理錯誤回饋

### 效能考量
1. 查詢優化
   - 使用 select_related/prefetch_related
   - 實作適當的快取機制
   - 最小化資料庫查詢

2. 非同步處理
   - 使用 Celery 處理耗時任務
   - 實作任務狀態回報
   - 錯誤重試機制

### 安全性要求
1. 存取控制
   - 實作角色權限管理
   - API 認證機制
   - 資料操作稽核

2. 資料保護
   - 輸入資料驗證
   - SQL 注入防護
   - XSS 防護

## 技術堆疊
- Django 4.2+
- Django REST Framework
- Celery
- Redis
- PostgreSQL

## 重要提醒
1. 開發前檢查項目
   - 確認 frepple 版本相容性
   - 檢視 requirements.txt
   - 測試環境設定

2. 程式碼品質
   - 單元測試覆蓋率 > 80%
   - 定期執行效能測試
   - 程式碼審查機制

3. 文件要求
   - API 文件
   - 架構設計文件
   - 部署指南

## 錯誤處理原則
1. 例外處理
   - 使用具體的例外類別
   - 實作錯誤日誌
   - 提供清晰的錯誤訊息

2. 資料驗證
   - 輸入資料完整性檢查
   - 業務規則驗證
   - 資料一致性確保

## 溝通原則
- 回應語言：繁體中文
- 提供具體的程式碼範例
- 明確標示待確認事項